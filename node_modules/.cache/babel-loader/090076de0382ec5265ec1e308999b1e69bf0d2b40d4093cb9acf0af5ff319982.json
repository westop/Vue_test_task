{"ast":null,"code":"import { createElementVNode as _createElementVNode, renderList as _renderList, Fragment as _Fragment, openBlock as _openBlock, createElementBlock as _createElementBlock, toDisplayString as _toDisplayString } from \"vue\";\nconst _hoisted_1 = [\"value\"];\nconst _hoisted_2 = /*#__PURE__*/_createElementVNode(\"option\", {\n  disabled: \"\",\n  value: \"\"\n}, \"Выберите из списка\", -1 /* HOISTED */);\nconst _hoisted_3 = [\"value\"];\nexport function render(_ctx, _cache, $props, $setup, $data, $options) {\n  return _openBlock(), _createElementBlock(\"select\", {\n    value: $props.modelValue,\n    onChange: _cache[0] || (_cache[0] = (...args) => $options.changeOption && $options.changeOption(...args))\n  }, [_hoisted_2, (_openBlock(true), _createElementBlock(_Fragment, null, _renderList($props.options, option => {\n    return _openBlock(), _createElementBlock(\"option\", {\n      key: option.value,\n      value: option.value\n    }, _toDisplayString(option.name), 9 /* TEXT, PROPS */, _hoisted_3);\n  }), 128 /* KEYED_FRAGMENT */))], 40 /* PROPS, HYDRATE_EVENTS */, _hoisted_1);\n}","map":{"version":3,"mappings":";;gCAEIA,oBAAqD;EAA7CC,QAAQ,EAAR,EAAQ;EAACC,KAAK,EAAC;GAAG,oBAAkB;;;uBAD9CC,oBASS;IATAD,KAAK,EAAEE,iBAAU;IAAGC,QAAM,yCAAEC,uDAAY;MAC/CC,UAAqD,qBACrDJ,oBAMSK,6BALUJ,cAAO,EAAjBK,MAAM;yBADfN,oBAMS;MAJNO,GAAG,EAAED,MAAM,CAACP,KAAK;MACjBA,KAAK,EAAEO,MAAM,CAACP;wBAEZO,MAAM,CAACE,IAAI","names":["_createElementVNode","disabled","value","_createElementBlock","$props","onChange","$options","_hoisted_2","_Fragment","option","key","name"],"sourceRoot":"","sources":["/home/wstp/vs_code/Vue_test_task/src/components/UI/MySelect.vue"],"sourcesContent":["<template>\n  <select :value=\"modelValue\" @change=\"changeOption\">\n    <option disabled value=\"\">Выберите из списка</option>\n    <option\n      v-for=\"option in options\"\n      :key=\"option.value\"\n      :value=\"option.value\"\n    >\n      {{ option.name }}\n    </option>\n  </select>\n</template>\n\n<script>\nexport default {\n  name: 'my-select',\n  props: {\n    modelValue: {\n      type: String\n    },\n    options: {\n      type: Array,\n      default: () => []\n    }\n  },\n  methods: {\n    changeOption(event) {\n      this.$emit('update:modelValue', event.target.value);\n    }\n  }\n}\n</script>\n\n<style scoped>\n\n</style>\n"]},"metadata":{},"sourceType":"module","externalDependencies":[]}